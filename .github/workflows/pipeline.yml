---
## The deployment pipeline for the krokidile app is implemented using GitHub Actions. The primary
## objective of this pipeline is to assess the releasability of the application for deployment with
## every push to the `main` branch. This is achieved through a series of automated tests and
## validations (performed on all branches, but the `main` branch carries the code that should be
## stable and production-ready). The workflow is designed to build every artifact of the krokidile
## app and subject it to various types of tests to verify its functionality and integrity. If all
## tests are successful, indicating that the project is ready for release, a release candidate is
## generated and published to DockerHub.
##
## The deployment process for the krokidile app utilizes Docker images. Images are built and
## unit tested. Each Snapshot image is tagged with the commit-sha, providing a clear reference to
## the version of the codebase from which it was generated, and subsequently pushed to DockerHub.
## Following this initial deployment, the Snapshot Docker images undergo further testing (security,
## performance, acceptance, etc.) to assess their performance and stability. If these additional
## tests pass successfully (and the workflow is running on the `main` branch), indicating that the
## Snapshot image is robust and reliable, it is then tagged as a release candidate. Notably, release
## candidates are exclusively published from the `main` branch.

name: Build + Deployment Pipeline

on:
  push:
    branches:
      - main
    paths-ignore:
      - '**.adoc'
  pull_request:
    branches-ignore:
      - dependabot/**
  schedule:
    - cron: '0 1 * * 2'

env:
  IMAGE_TAG_RC: rc
  IMAGE_TAG_LATEST: latest
  YQ_VERSION: v4.2.0
  YQ_BINARY: yq_linux_amd64

permissions:
  contents: read

jobs:

  # info:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
  #     - name: Docker Version
  #       run: |
  #         docker version
  #         docker compose version
  #       shell: bash

  # ----- Commit stage - 1 - lint ---------------

  lint-yaml:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Run yamllint
        run: docker compose up lint-yaml --exit-code-from lint-yaml
        shell: bash

  lint-filenames:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Run ls-lint in container
        run: docker compose up lint-filenames --exit-code-from lint-filenames
        shell: bash

  lint-folders:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Run folderslint in container
        run: docker compose up lint-folders --exit-code-from lint-folders
        shell: bash

  shellcheck:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Run ShellCheck
        uses: ludeeus/action-shellcheck@2.0.0
        with:
          ignore_paths: node_modules target

  # ----- Build stage - docs --------------------

  docs:
    runs-on: ubuntu-latest
    if: ${{ github.actor != 'dependabot[bot]' }}
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{github.ref}}
      - name: Adjust version in docs/antora.yml
        uses: sebastian-sommerfeld-io/github-action-update-antora-yml@main
        with:
          git_ref: ${{github.ref}}
          file: docs/antora.yml
      - name: Copy adoc files to project root
        run: |
          cp docs/modules/ROOT/pages/index.adoc README.adoc
          cp docs/modules/ROOT/pages/license.adoc LICENSE.adoc
          cp docs/modules/ROOT/pages/contribute.adoc CONTRIBUTING.adoc
          cp docs/modules/ROOT/pages/security.adoc SECURITY.adoc
        shell: bash
      - name: Add do-not-edit remark to adoc files in project root
        run: |
          for file in *.adoc; do

            {
              echo
              echo "// +---------------------------------------------------+"
              echo "// |                                                   |"
              echo "// |        DO NOT EDIT DIRECTLY !!!!!                 |"
              echo "// |                                                   |"
              echo "// |        File is auto-generated by pipeline.        |"
              echo "// |        Contents are based on Antora docs.         |"
              echo "// |                                                   |"
              echo "// +---------------------------------------------------+"
            } >> "$file"

          done
        shell: bash
      - name: Replace Caption in README.adoc
        run: |
          file=README.adoc
          content=$(cat "$file")
          content="${content//= Introduction/= krokidile}"
          echo "$content" > "$file"
        shell: bash
      - name: Replace xref with links to GitHub in adoc files in project root
        run: |
          for file in *.adoc; do
            content=$(cat "$file")
            content="${content//xref:development-guide.adoc[]/link:https://github.com/sommerfeld-io/krokidile/blob/main/docs/modules/development-guide/pages/development-guide.adoc[Development Guide]}"
            echo "$content" > "$file"
          done
        shell: bash
      - name: Commit and push
        uses: EndBug/add-and-commit@v9.1.4
        with:
          author_name: sebastian
          author_email: sebastian@sommerfeld.io
          message: "docs: [Actions Bot] generate docs"

  # ----- Build stage ---------------------------

  build-image:
    runs-on: ubuntu-latest
    if: ${{ github.actor != 'dependabot[bot]' }}
    name: ${{ matrix.image-name }}:${{ github.sha }}
    needs: [
      'docs',
    ]
    permissions:
      contents: read
      pull-requests: write
      security-events: write
    strategy:
      matrix:
        include:
          - registry: docker.io
            image-name: krokidile
            context: .
            dockerfile: Dockerfile.app
          - registry: docker.io
            image-name: krokidile-docs
            context: .
            dockerfile: Dockerfile.docs
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: hadolint
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: ${{ matrix.context }}/${{ matrix.dockerfile }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Container Registry ${{ matrix.registry }}
        uses: docker/login-action@v3
        with:
          registry: ${{ matrix.registry }}
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5.5.1
        with:
          images: ${{ matrix.registry }}/${{ secrets.DOCKERHUB_USER }}/${{ matrix.image-name }}
          labels: |
            org.opencontainers.image.revision=${{ github.sha }}
      - name: Build the Docker image and push to ${{ matrix.registry }}
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.context }}/${{ matrix.dockerfile }}
          build-args: |
            VERSION=${{ github.sha }}
            COMMIT_SHA=${{ github.sha }}
          platforms: linux/amd64
          push: true
          tags: ${{ matrix.registry }}/${{ secrets.DOCKERHUB_USER }}/${{ matrix.image-name }}:${{ github.sha }}
          labels: ${{ steps.meta.outputs.labels }}
          # cache-from: type=gha
          # cache-to: type=gha,mode=max
          provenance: true
          sbom: true
      - name: Docker Scout CVEs for ${{ matrix.image-name }}:${{ github.sha }}
        uses: docker/scout-action@v1.9.1
        with:
          command: cves
          image: ${{ matrix.registry }}/${{ secrets.DOCKERHUB_USER }}/${{ matrix.image-name }}:${{ github.sha }}
          exit-code: false
          write-comment: ${{ github.event_name == 'pull_request' }}
      # - name: Docker Scout Compare :${{ github.sha }} to :${{ env.IMAGE_TAG_RC }}"
      #   uses: docker/scout-action@v1.9.1
      #   with:
      #     command: compare
      #     image: ${{ matrix.registry }}/${{ secrets.DOCKERHUB_USER }}/${{ matrix.image-name }}:${{ github.sha }}
      #     to: ${{ matrix.registry }}/${{ secrets.DOCKERHUB_USER }}/${{ matrix.image-name }}:${{ env.IMAGE_TAG_RC }}
      #     exit-code: false
      #     write-comment: ${{ github.event_name == 'pull_request' }}

  test-image:
    runs-on: ubuntu-latest
    if: ${{ github.actor != 'dependabot[bot]' }}
    name: ${{ matrix.image-name }}
    needs: ['build-image']
    permissions:
      contents: read
    strategy: # see build-image (duplicated because github actions does not support anchors)
      matrix:
        include:
          - registry: docker.io
            image-name: krokidile
          - registry: docker.io
            image-name: krokidile-docs
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Dummy for ${{ matrix.registry }}/${{ secrets.DOCKERHUB_USER }}/${{ matrix.image-name }}:${{ github.sha }}
        run: |
          echo "CHANGE ME"
        shell: bash

  # ----- Deploy :rc stage ----------------------

  publish-rc:
    runs-on: ubuntu-latest
    if: ${{ (github.actor != 'dependabot[bot]') && (github.ref == 'refs/heads/main') }}
    name: ${{ matrix.image-name }} as release candidate
    needs: ['test-image']
    permissions: # see build-image (duplicated because github actions does not support anchors)
      contents: read
      pull-requests: write
      security-events: write
    strategy: # see build-image (duplicated because github actions does not support anchors)
      matrix:
        include:
          - registry: docker.io
            image-name: krokidile
          - registry: docker.io
            image-name: krokidile-docs
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Login to Container Registry ${{ matrix.registry }}
        uses: docker/login-action@v3
        with:
          registry: ${{ matrix.registry }}
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Re-tag image as release candicate (:${{ env.IMAGE_TAG_RC }}) and deploy to ${{ matrix.registry }}
        run: |
          SRC_IMAGE="${{ matrix.registry }}/${{ secrets.DOCKERHUB_USER }}/${{ matrix.image-name }}:${{ github.sha }}"
          TARGET_IMAGE="${{ matrix.registry }}/${{ secrets.DOCKERHUB_USER }}/${{ matrix.image-name }}:${{ env.IMAGE_TAG_RC }}"
          docker pull "$SRC_IMAGE"
          docker tag "$SRC_IMAGE" "$TARGET_IMAGE"
          docker push "$TARGET_IMAGE"
        shell: bash
      # - name: Docker Scout Compare :${{ env.IMAGE_TAG_RC }}" to :${{ env.IMAGE_TAG_LATEST }}
      #   uses: docker/scout-action@v1.9.1
      #   with:
      #     command: compare
      #     image: ${{ matrix.registry }}/${{ secrets.DOCKERHUB_USER }}/${{ matrix.image-name }}:${{ env.IMAGE_TAG_RC }}
      #     to: ${{ matrix.registry }}/${{ secrets.DOCKERHUB_USER }}/${{ matrix.image-name }}:${{ env.IMAGE_TAG_LATEST }}
      #     exit-code: false
      #     write-comment: ${{ github.event_name == 'pull_request' }}

  test-rc:
    runs-on: ubuntu-latest
    if: ${{ github.actor != 'dependabot[bot]' }}
    name: ${{ matrix.image-name }}
    needs: ['publish-rc']
    permissions:
      contents: read
    strategy: # see build-image (duplicated because github actions does not support anchors)
      matrix:
        include:
          - registry: docker.io
            image-name: krokidile
          - registry: docker.io
            image-name: krokidile-docs
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Dummy for ${{ matrix.registry }}/${{ secrets.DOCKERHUB_USER }}/${{ matrix.image-name }}:${{ env.IMAGE_TAG_RC }}
        run: echo "CHANGE ME"
        shell: bash

  # ----- Tag repository ------------------------

  release-code:
    runs-on: ubuntu-latest
    needs: ['test-rc']
    if: ${{ (github.actor != 'dependabot[bot]') && (github.ref == 'refs/heads/main') }}
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{github.ref}}
      - name: Info - package.json
        run: cat package.json
        shell: bash
      - name: Info - docs/antora.yml
        run: cat docs/antora.yml
        shell: bash
      - name: Install Node.js
        uses: actions/setup-node@v4.0.2
        with:
          node-version: 22.2.0
      - name: semantic-release - Install
        run: |
          npm install --save-dev semantic-release
          npm install --save-dev @semantic-release/commit-analyzer
          npm install --save-dev @semantic-release/release-notes-generator
          npm install --save-dev @semantic-release/npm
          npm install --save-dev @semantic-release/github
        shell: bash
      # TODO bump versions in antora.yml
      # TODO https://github.com/sommerfeld-io/krokidile/issues/20
      - name: semantic-release - Run
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN_REPO_AND_PROJECT }}
        run: npx semantic-release
        shell: bash
      - name: Info - package.json
        run: cat package.json
        shell: bash
      - name: Info - docs/antora.yml
        run: cat docs/antora.yml
        shell: bash
      # TODO revert version in antora.yml? from bash (sed)?
      # TODO https://github.com/sommerfeld-io/krokidile/issues/20
      - name: Commit and push
        uses: EndBug/add-and-commit@v9.1.4
        with:
          author_name: sebastian
          author_email: sebastian@sommerfeld.io
          message: "docs: [Actions Bot] bump version"

  # ----- Cleanup -------------------------------

  cleanup:
    runs-on: ubuntu-latest
    name: ${{ matrix.image-name }}
    needs: ['test-rc']
    if: always()
    permissions:
      contents: read
    strategy: # see build-image (duplicated because github actions does not support anchors)
      matrix:
        include:
          - registry: docker.io
            image-name: krokidile
          - registry: docker.io
            image-name: krokidile-docs
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Remove (:${{ github.sha }}) from ${{ matrix.registry }}
        run: |
          TOKEN=$(curl -s -H "Content-Type: application/json" -X POST -d '{"username": "'${{ secrets.DOCKERHUB_USER }}'", "password": "'${{ secrets.DOCKERHUB_TOKEN }}'"}' https://hub.docker.com/v2/users/login/ | jq -r .token)
          curl -X DELETE -H "Authorization: JWT ${TOKEN}" https://hub.docker.com/v2/repositories/${{ secrets.DOCKERHUB_USER }}/${{ matrix.image-name }}/tags/${{ github.sha }}/
        shell: bash
